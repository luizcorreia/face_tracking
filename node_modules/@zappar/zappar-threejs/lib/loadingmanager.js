"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const three_1 = require("three");
/**
 * Shows a loading bar based on number of assets loaded.
 * @remarks
 * This method overwrites the default 'onStart' behaviour, please use _onStart instead.
 */
class LoadingManager extends three_1.LoadingManager {
    constructor(style, onLoad, onProgress, onError) {
        super(() => { var _a; return (_a = onLoad) === null || _a === void 0 ? void 0 : _a(); }, (url, loaded, total) => {
            var _a;
            (_a = onProgress) === null || _a === void 0 ? void 0 : _a(url, loaded, total);
            this.updateLoader(loaded / total * 100);
        }, onError);
        // user passed callback as we're making onStart readonly.
        this.onStartCallback = undefined;
        // update loading bar based on % = (n-loaded / n-total * 100)
        this.updateLoader = (load_percentage) => {
            const elem = document.getElementById("loader-bar");
            elem.style.width = load_percentage + '%';
            elem.style.borderTopRightRadius = load_percentage + 'px';
            elem.style.borderBottomRightRadius = load_percentage + 'px';
            elem.addEventListener("transitionend", (ev) => {
                if (load_percentage == 100) {
                    this.containerDiv.style.opacity = "0";
                    this.containerDiv.addEventListener("transitionend", (ev) => {
                        if (ev.propertyName == 'opacity') {
                            this.removeDiv();
                        }
                    });
                }
            });
        };
        // As onStart is not a constructor, prevent it being overwriten in future.
        this.onStart = () => {
            this._initialiseDiv();
            if (this.onStartCallback)
                this.onStartCallback();
        };
        // provide user with other means of detecting the start of loading
        this._onStart = (callback) => {
            this.onStartCallback = callback;
        };
        // remove base div
        this.removeDiv = () => {
            this.containerDiv.remove();
        };
        this.customStyle = style;
        this.containerDiv = document.createElement("div");
    }
    _initialiseDiv() {
        var _a, _b, _c, _d, _e;
        let css = {
            container: {
                position: 'fixed',
                width: '100%',
                height: '100%',
                top: '0px',
                left: '0px',
                zIndex: 10000,
                backgroundColor: 'rgba(0,0,0,0.8)',
                fontFamily: 'sans-serif',
                color: 'rgba(255,255,255,1)',
                display: 'flex',
                flexDirection: 'column',
                alignItems: 'center',
                justifyContent: 'center',
                transition: 'opacity 500ms'
            },
            inner: {
                maxWidth: '400px',
                textAlign: 'center'
            },
            title: {
                fontSize: '20px'
            },
            progress: {
                background: 'rgba(255,255,255, 0.1)',
                justifyContent: 'flex-start',
                borderRadius: '100px',
                alignItems: 'center',
                position: 'relative',
                padding: '0 5px',
                display: 'flex',
                height: '15px',
                width: '250px',
                margin: '15px'
            },
            progressValue: {
                boxShadow: '0 10px 40px -10px #fff',
                borderTopLeftRadius: '100px',
                borderBottomLeftRadius: '100px',
                background: 'rgba(255,255,255,1)',
                height: '10px',
                width: '0',
                transition: 'width 500ms',
            }
        };
        // overwrite base styles with user provided values if they exist
        //  console.log(css.container)
        // console.log(this.customStyle?.container)
        Object.assign(css.container, (_a = this.customStyle) === null || _a === void 0 ? void 0 : _a.container);
        //console.log(css.container)
        Object.assign(css.inner, (_b = this.customStyle) === null || _b === void 0 ? void 0 : _b.inner);
        Object.assign(css.title, (_c = this.customStyle) === null || _c === void 0 ? void 0 : _c.title);
        Object.assign(css.progress, (_d = this.customStyle) === null || _d === void 0 ? void 0 : _d.progress);
        Object.assign(css.progressValue, (_e = this.customStyle) === null || _e === void 0 ? void 0 : _e.progressValue);
        const divs = {
            inner: document.createElement('div'),
            title: document.createElement('div'),
            progress: document.createElement('div'),
            progressValue: document.createElement('div')
        };
        divs.inner.classList.add('zappar-inner-loading');
        divs.title.id = 'zappar-title-loading';
        divs.title.innerText = 'Loading..';
        divs.inner.id = 'zappar-progress';
        divs.progress.id = 'zappar-loading-progress';
        divs.progressValue.id = 'loader-bar';
        Object.assign(this.containerDiv.style, css.container);
        Object.assign(divs.inner.style, css.inner);
        Object.assign(divs.title.style, css.title);
        Object.assign(divs.progress.style, css.progress);
        Object.assign(divs.progressValue.style, css.progressValue);
        divs.inner.appendChild(divs.title);
        divs.inner.appendChild(divs.progress);
        divs.progress.appendChild(divs.progressValue);
        this.containerDiv.appendChild(divs.inner);
        document.body.append(this.containerDiv);
    }
}
exports.LoadingManager = LoadingManager;
