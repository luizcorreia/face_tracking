"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const THREE = require("three");
const Zappar = require("@zappar/zappar");
const facebuffergeometry_1 = require("./facebuffergeometry");
const three_1 = require("three");
class HeadMaskMesh extends THREE.Mesh {
    constructor(onLoad, onError) {
        super();
        this.onLoad = onLoad;
        this.onError = onError;
        this._faceMesh = new Zappar.FaceMesh();
        this._faceBufferGeometry = new facebuffergeometry_1.FaceBufferGeometry(this._faceMesh);
        this.geometry = this._faceBufferGeometry;
        this.material = new three_1.MeshBasicMaterial({
            colorWrite: false
        });
        this._faceMesh.loadDefaultFullHeadSimplified(true, true, true, true).then(() => { var _a, _b; return (_b = (_a = this).onLoad) === null || _b === void 0 ? void 0 : _b.call(_a); }).catch(() => { var _a, _b; return (_b = (_a = this).onError) === null || _b === void 0 ? void 0 : _b.call(_a); });
        this.renderOrder = Number.MIN_SAFE_INTEGER;
    }
    updateFromFaceAnchorGroup(f) {
        this._faceBufferGeometry.updateFromFaceAnchorGroup(f);
    }
    updateFromFaceAnchor(f) {
        this._faceBufferGeometry.updateFromFaceAnchor(f);
    }
    updateFromIdentityExpression(identity, expression) {
        this._faceBufferGeometry.updateFromIdentityExpression(identity, expression);
    }
}
exports.HeadMaskMesh = HeadMaskMesh;
