"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const THREE = require("three");
const zappar_1 = require("@zappar/zappar");
class FaceMeshLoader extends THREE.Loader {
    constructor(manager) {
        super(manager);
    }
    load(options, onLoad, onProgress, onError) {
        let trk = new zappar_1.FaceMesh();
        let p;
        if (options) {
            if (typeof options === "string")
                p = trk.load(options);
            else {
                if (options.customModel)
                    p = trk.load(options.customModel, options.fillMouth, options.fillEyeLeft, options.fillEyeRight, options.fillNeck);
                else
                    p = trk.loadDefaultFace(options.fillMouth, options.fillEyeLeft, options.fillEyeRight);
            }
        }
        else {
            p = trk.loadDefaultFace();
        }
        p.then(() => {
            var _a;
            (_a = onLoad) === null || _a === void 0 ? void 0 : _a(trk);
        }).catch(_ => {
            var _a;
            (_a = onError) === null || _a === void 0 ? void 0 : _a();
        });
        return trk;
    }
    loadFace(options, onLoad, onProgress, onError) {
        let trk = new zappar_1.FaceMesh();
        let p;
        if (options) {
            if (options.customModel)
                p = trk.load(options.customModel, options.fillMouth, options.fillEyeLeft, options.fillEyeRight, options.fillNeck);
            else
                p = trk.loadDefaultFace(options.fillMouth, options.fillEyeLeft, options.fillEyeRight);
        }
        else {
            p = trk.loadDefaultFace();
        }
        p.then(() => {
            var _a;
            (_a = onLoad) === null || _a === void 0 ? void 0 : _a(trk);
        }).catch(_ => {
            var _a;
            (_a = onError) === null || _a === void 0 ? void 0 : _a();
        });
        return trk;
    }
    loadFullHeadSimplified(options, onLoad, onProgress, onError) {
        let trk = new zappar_1.FaceMesh();
        let p;
        if (options) {
            if (options.customModel)
                p = trk.load(options.customModel, options.fillMouth, options.fillEyeLeft, options.fillEyeRight, options.fillNeck);
            else
                p = trk.loadDefaultFullHeadSimplified(options.fillMouth, options.fillEyeLeft, options.fillEyeRight, options.fillNeck);
        }
        else {
            p = trk.loadDefaultFullHeadSimplified();
        }
        p.then(() => {
            var _a;
            (_a = onLoad) === null || _a === void 0 ? void 0 : _a(trk);
        }).catch(_ => {
            var _a;
            (_a = onError) === null || _a === void 0 ? void 0 : _a();
        });
        return trk;
    }
    parse() {
    }
}
exports.FaceMeshLoader = FaceMeshLoader;
