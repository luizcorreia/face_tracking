import * as THREE from "three";
import { WebGLRenderer } from "three";
import * as Zappar from "@zappar/zappar";
import { InstantWorldAnchor } from "@zappar/zappar/lib/instantworldtracker";
import { CameraSource } from "./defaultpipeline";
export declare enum CameraPoseMode {
    Default = 0,
    Attitude = 1,
    AnchorOrigin = 2
}
export declare enum CameraMirrorMode {
    None = 0,
    Poses = 1,
    CSS = 2
}
export declare class Camera extends THREE.Camera {
    pipeline: Zappar.Pipeline;
    backgroundTexture: THREE.Texture;
    rawPose: Float32Array;
    poseMode: CameraPoseMode;
    poseAnchorOrigin: Zappar.ImageAnchor | Zappar.FaceAnchor | InstantWorldAnchor | undefined;
    rearCameraMirrorMode: CameraMirrorMode;
    userCameraMirrorMode: CameraMirrorMode;
    private _currentMirrorMode;
    isPerspectiveCamera: boolean;
    rearCameraSource: CameraSource;
    userCameraSource: CameraSource;
    private _cameraRunningRear;
    private _hasSetCSSScaleX;
    constructor(pipeline?: Zappar.Pipeline);
    private _pause;
    private _resume;
    start(userFacing?: boolean): void;
    setPoseModeAnchorOrigin(a: Zappar.ImageAnchor | Zappar.FaceAnchor): void;
    get currentMirrorMode(): CameraMirrorMode;
    updateFrame(renderer: WebGLRenderer): void;
    updateMatrixWorld(force?: boolean): void;
    private _getOriginPose;
    private _updateBackgroundTexture;
}
