"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const zappar_1 = require("./zappar");
const event_1 = require("./event");
class Pipeline {
    constructor() {
        this.onFrameUpdate = new event_1.Event();
        this._onFrameUpdateInternal = new event_1.Event();
        this._lastFrameNumber = -1;
        this._z = zappar_1.z();
        this._impl = this._z.pipeline_create();
    }
    frameUpdate() {
        this._z.pipeline_frame_update(this._impl);
        let frameNumber = this._z.pipeline_frame_number(this._impl);
        if (frameNumber !== this._lastFrameNumber) {
            this._lastFrameNumber = frameNumber;
            this._onFrameUpdateInternal.emit();
            this.onFrameUpdate.emit();
        }
    }
    _getImpl() {
        return this._impl;
    }
    glContextSet(gl) {
        this._z.pipeline_gl_context_set(this._impl, gl);
    }
    cameraFrameTextureGL() {
        return this._z.pipeline_camera_frame_texture_gl(this._impl);
    }
    cameraFrameTextureMatrix(renderWidth, renderHeight, mirror) {
        return this._z.pipeline_camera_frame_texture_matrix(this._impl, renderWidth, renderHeight, mirror === true);
    }
    cameraFrameDrawGL(renderWidth, renderHeight, mirror) {
        this._z.pipeline_camera_frame_draw_gl(this._impl, renderWidth, renderHeight, mirror);
    }
    cameraFrameUploadGL() {
        this._z.pipeline_camera_frame_upload_gl(this._impl);
    }
    processGL() {
        this._z.pipeline_process_gl(this._impl);
    }
    cameraModel() {
        return this._z.pipeline_camera_model(this._impl);
    }
    cameraPoseDefault() {
        return this._z.pipeline_camera_pose_default(this._impl);
    }
    cameraPoseWithAttitude(mirror) {
        return this._z.pipeline_camera_pose_with_attitude(this._impl, mirror || false);
    }
    cameraPoseWithOrigin(o) {
        return this._z.pipeline_camera_pose_with_origin(this._impl, o);
    }
    cameraFrameUserFacing() {
        return this._z.pipeline_camera_frame_user_facing(this._impl);
    }
    drawFace(projectionMatrix, cameraMatrix, targetMatrix, m) {
        this._z.pipeline_draw_face(this._impl, projectionMatrix, cameraMatrix, targetMatrix, m._getImpl());
    }
}
exports.Pipeline = Pipeline;
