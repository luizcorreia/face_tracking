"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const event_1 = require("./event");
const zappar_1 = require("./zappar");
class BarcodeFinder {
    constructor(_pipeline) {
        this._pipeline = _pipeline;
        this.onDetection = new event_1.Event1();
        this._lastDetected = [];
        this._found = [];
        this._formats = [];
        this._frameUpdate = () => {
            this._found = [];
            let num = this._z.barcode_finder_found_number(this._impl);
            for (let i = 0; i < num; i++) {
                this._found.push({
                    text: this._z.barcode_finder_found_text(this._impl, i),
                    format: this._z.barcode_finder_found_format(this._impl, i)
                });
            }
            if (this._found.length === 0)
                return;
            outerloop: for (let entry of this._found) {
                for (let previous of this._lastDetected) {
                    if (previous.text === entry.text)
                        continue outerloop;
                }
                this.onDetection.emit(entry);
            }
            this._lastDetected = this._found;
        };
        this._pipeline._onFrameUpdateInternal.bind(this._frameUpdate);
        this._z = zappar_1.z();
        this._impl = this._z.barcode_finder_create(this._pipeline._getImpl());
        this._formats.push.apply(this._formats, [
            1 /* AZTEC */,
            2 /* CODABAR */,
            4 /* CODE_39 */,
            8 /* CODE_93 */,
            16 /* CODE_128 */,
            32 /* DATA_MATRIX */,
            64 /* EAN_8 */,
            128 /* EAN_13 */,
            256 /* ITF */,
            512 /* MAXICODE */,
            1024 /* PDF_417 */,
            2048 /* QR_CODE */,
            4096 /* RSS_14 */,
            8192 /* RSS_EXPANDED */,
            16384 /* UPC_A */,
            32768 /* UPC_E */,
            65536 /* UPC_EAN_EXTENSION */
        ]);
    }
    destroy() {
        this._pipeline._onFrameUpdateInternal.unbind(this._frameUpdate);
        this._found = [];
        this._lastDetected = [];
        this._z.barcode_finder_destroy(this._impl);
    }
    get found() {
        return this._found;
    }
    get enabled() {
        return this._z.barcode_finder_enabled(this._impl);
    }
    set enabled(e) {
        this._z.barcode_finder_enabled_set(this._impl, e);
    }
    get formats() {
        return this._formats;
    }
    set formats(f) {
        this._formats = f.slice();
        let underlying = 0;
        for (let format of this._formats) {
            underlying |= format;
        }
        this._z.barcode_finder_formats_set(this._impl, underlying);
    }
}
exports.BarcodeFinder = BarcodeFinder;
