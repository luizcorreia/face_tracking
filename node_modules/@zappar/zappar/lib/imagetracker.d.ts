import { Event, Event1 } from "./event";
import { Pipeline } from "./pipeline";
export interface ImageAnchor {
    onVisible: Event;
    onNotVisible: Event;
    id: string;
    pose(cameraPose: Float32Array, mirror?: boolean): Float32Array;
    poseCameraRelative(mirror?: boolean): Float32Array;
    visible: boolean;
}
export declare class ImageTracker {
    private _pipeline;
    onVisible: Event1<ImageAnchor>;
    onNotVisible: Event1<ImageAnchor>;
    onNewAnchor: Event1<ImageAnchor>;
    visible: Set<ImageAnchor>;
    anchors: Map<string, ImageAnchor>;
    private _visibleLastFrame;
    private _z;
    private _impl;
    constructor(_pipeline: Pipeline, targetFile?: string | ArrayBuffer);
    destroy(): void;
    private _frameUpdate;
    loadTarget(src: string | ArrayBuffer): Promise<void>;
    get enabled(): boolean;
    set enabled(e: boolean);
}
